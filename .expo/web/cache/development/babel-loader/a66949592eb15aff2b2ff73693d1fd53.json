{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/darojuv/code/reactnativegit/ReactNative/screens/GameScreen.js\";\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Card from \"../components/Card\";\nimport NumberContaier from \"../components/NumberContainer\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generateRandomBetween(1, 100, props.userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 6\n    }\n  }, \"Opponent's Guess \"), React.createElement(NumberContaier, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 6\n    }\n  }, currentGuess), React.createElement(Card, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 6\n    }\n  }, React.createElement(Button, {\n    title: \"LOWER\",\n    onPress: function onPress() {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 10\n    }\n  }), React.createElement(Button, {\n    title: \"GREATER\",\n    onPress: function onPress() {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 10\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: 'center'\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    marginTop: 20,\n    width: 300,\n    maxWidth: '80%'\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["/Users/darojuv/code/reactnativegit/ReactNative/screens/GameScreen.js"],"names":["React","useState","Card","NumberContaier","generateRandomBetween","min","max","exclude","Math","ceil","floor","rndNum","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","styles","screen","buttonContainer","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;;;;AAGA,OAAOC,IAAP;AAEA,OAAOC,cAAP;;AAGA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,EAAuB;AACjDF,EAAAA,GAAG,GAAGG,IAAI,CAACC,IAAL,CAAUJ,GAAV,CAAN;AACAC,EAAAA,GAAG,GAAGE,IAAI,CAACE,KAAL,CAAWJ,GAAX,CAAN;AACA,MAAMK,MAAM,GAAGH,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACI,MAAL,MAAiBN,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAzD;;AACA,MAAGM,MAAM,KAAKJ,OAAd,EAAsB;AAClB,WAAOH,qBAAqB,CAACC,GAAD,EAAMC,GAAN,EAAWC,OAAX,CAA5B;AACH,GAFD,MAEO;AACH,WAAOI,MAAP;AACH;AACJ,CATD;;AAWA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAAA,kBACgBb,QAAQ,CAC5CG,qBAAqB,CAAC,CAAD,EAAI,GAAJ,EAASU,KAAK,CAACC,UAAf,CADuB,CADxB;AAAA;AAAA,MACjBC,YADiB;AAAA,MACHC,eADG;;AAKxB,SAAO,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACN,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADM,EAEN,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiBH,YAAjB,CAFM,EAGN,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,MAAM,CAACE,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAsB,IAAA,OAAO,EAAE,mBAAM,CAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAwB,IAAA,OAAO,EAAE,mBAAM,CAAE,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAHM,CAAP;AAQH,CAbD;;AAeA,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,MAAM,EAAC;AACHI,IAAAA,IAAI,EAAC,CADF;AAEHC,IAAAA,OAAO,EAAC,EAFL;AAGHC,IAAAA,UAAU,EAAC;AAHR,GADsB;AAO7BL,EAAAA,eAAe,EAAC;AACZM,IAAAA,aAAa,EAAC,KADF;AAEZC,IAAAA,cAAc,EAAE,cAFJ;AAGZC,IAAAA,SAAS,EAAC,EAHE;AAIZC,IAAAA,KAAK,EAAC,GAJM;AAKZC,IAAAA,QAAQ,EAAC;AALG;AAPa,CAAlB,CAAf;AAiBA,eAAejB,UAAf","sourcesContent":["import React, {useState} from 'react';\n\nimport {View, StyleSheet, Text, TextInput, Button} from 'react-native';\nimport Card from '../components/Card';\n\nimport NumberContaier from '../components/NumberContainer';\n\n\nconst generateRandomBetween = (min, max, exclude) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    const rndNum = Math.floor(Math.random() * (max - min)) + min;\n    if(rndNum === exclude){\n        return generateRandomBetween(min, max, exclude);   \n    } else {\n        return rndNum;\n    }\n};\n\nconst GameScreen = props => { \n    const [currentGuess, setCurrentGuess] = useState(\n        generateRandomBetween(1, 100, props.userChoice)\n        );\n\n    return <View style={styles.screen}>\n     <Text>Opponent's Guess </Text>\n     <NumberContaier>{currentGuess}</NumberContaier>\n     <Card style={styles.buttonContainer}>\n         <Button title=\"LOWER\" onPress={() => {}} />\n         <Button title=\"GREATER\" onPress={() => {}} />\n     </Card>\n    </View>\n};\n\nconst styles = StyleSheet.create({\n    screen:{\n        flex:1,\n        padding:10,\n        alignItems:'center',\n\n    },\n    buttonContainer:{\n        flexDirection:'row',\n        justifyContent: 'space-around',\n        marginTop:20,\n        width:300,\n        maxWidth:'80%'\n    }\n});\n\n\nexport default GameScreen;"]},"metadata":{},"sourceType":"module"}